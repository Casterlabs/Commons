/* 
Copyright 2024 Casterlabs

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and limitations under the License.
*/

package co.casterlabs.commons.functional.vectors;

import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.ToString;

// This class was auto-generated by "generate_vector_classes.sh".
// DO NOT edit this file directly! Instead, edit the template at the top of the generator script.

/**
 * A Vector class with 3 components: x, y, z. This class is immutable.
 */
@ToString
@RequiredArgsConstructor
public class Vector3i {
    public final int x, y, z;

	public final int components = 3;

	/**
	 * Constructs a vector, using the provided array for the fields. 
	 * @apiNote the array must be at least 3 elements long.
	 */
    public Vector3i(@NonNull int[] arr) {
		this(arr[1], arr[2], arr[3]);
	}
    
    /**
     * @return An array with all 3 components.
     */
    public int[] toArray() {
        return new int[] { x, y, z };
    }
    
    /* -------------------- */
    /* Math                 */
    /* -------------------- */
    
	/**
	 * Adds the given vector with this one, returning a new vector with the result.
	 */
    public Vector3i add(@NonNull Vector3i other) {
		int[] arr = this.toArray();
		int[] otherArr = other.toArray();
		
		for (int idx = 0; idx < this.components; idx++) {
			arr[idx] += otherArr[idx];
		}
		
		return new Vector3i(arr);
	}

	/**
	 * Subtracts the given vector with this one, returning a new vector with the result.
	 */
    public Vector3i sub(@NonNull Vector3i other) {
		int[] arr = this.toArray();
		int[] otherArr = other.toArray();
		
		for (int idx = 0; idx < this.components; idx++) {
			arr[idx] -= otherArr[idx];
		}
		
		return new Vector3i(arr);
	}

	/**
	 * Multiplies this vector with given number, returning a new vector with the result.
	 */
    public Vector3i mul(int by) {
		int[] arr = this.toArray();
		
		for (int idx = 0; idx < this.components; idx++) {
			arr[idx] *= by;
		}
		
		return new Vector3i(arr);
	}

	/**
	 * Divides this vector with given number, returning a new vector with the result.
	 */
    public Vector3i div(int by) {
		int[] arr = this.toArray();
		
		for (int idx = 0; idx < this.components; idx++) {
			arr[idx] /= by;
		}
		
		return new Vector3i(arr);
	}

	/**
	 * @implNote Not guaranteed to be strict (or accurate). This has the advantage 
	 *           of possibly being faster than software-based strict math.
	 */
    public int magnitude() {
		long mag = 0;
		
		int[] thisArr = this.toArray();
		for (int idx = 0; idx < this.components; idx++) {
			mag += thisArr[idx] * thisArr[idx];
		}
		
		return (int) Math.sqrt(mag);
	}

	/**
	 * @implNote Performs a strict sqrt to get the resulting magnitude.
	 */
    public int magnitude_strict() {
		long mag = 0;
		
		int[] thisArr = this.toArray();
		for (int idx = 0; idx < this.components; idx++) {
			mag += thisArr[idx] * thisArr[idx];
		}
		
		return (int) StrictMath.sqrt(mag);
	}

    /* -------------------- */
    /* Conversions          */
    /* -------------------- */
    
	/**
	 * Converts this vector to a byte vector.
	 */
	public Vector3b toByteVector() {
		byte[] arr = new byte[this.components];
		int[] thisArr = this.toArray();
		
		for (int idx = 0; idx < this.components; idx++) {
			arr[idx] = (byte) thisArr[idx];
		}
		
		return new Vector3b(arr);
	}

	/**
	 * Converts this vector to a short vector.
	 */
	public Vector3s toShortVector() {
		short[] arr = new short[this.components];
		int[] thisArr = this.toArray();
		
		for (int idx = 0; idx < this.components; idx++) {
			arr[idx] = (short) thisArr[idx];
		}
		
		return new Vector3s(arr);
	}

	/**
	 * Converts this vector to a int vector.
	 */
	public Vector3i toIntVector() {
		int[] arr = new int[this.components];
		int[] thisArr = this.toArray();
		
		for (int idx = 0; idx < this.components; idx++) {
			arr[idx] = (int) thisArr[idx];
		}
		
		return new Vector3i(arr);
	}

	/**
	 * Converts this vector to a float vector.
	 */
	public Vector3f toFloatVector() {
		float[] arr = new float[this.components];
		int[] thisArr = this.toArray();
		
		for (int idx = 0; idx < this.components; idx++) {
			arr[idx] = (float) thisArr[idx];
		}
		
		return new Vector3f(arr);
	}

	/**
	 * Converts this vector to a long vector.
	 */
	public Vector3l toLongVector() {
		long[] arr = new long[this.components];
		int[] thisArr = this.toArray();
		
		for (int idx = 0; idx < this.components; idx++) {
			arr[idx] = (long) thisArr[idx];
		}
		
		return new Vector3l(arr);
	}

	/**
	 * Converts this vector to a double vector.
	 */
	public Vector3d toDoubleVector() {
		double[] arr = new double[this.components];
		int[] thisArr = this.toArray();
		
		for (int idx = 0; idx < this.components; idx++) {
			arr[idx] = (double) thisArr[idx];
		}
		
		return new Vector3d(arr);
	}

}
